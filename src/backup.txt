
export const forgotPassword = async(req, res) => {
    try {
        const { email } = req.body;

        // Check if the user exists
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({
                status: "failed",
                message: "User not found",
            });
        }

        // Generate OTP
        const otp = otpGenerator.generate(6, {
            digits: true,
            alphabets: false,
            upperCase: false,
            specialChars: false,
        });

        // Hash the OTP
        const hash = crypto.createHash("sha256").update(otp).digest("hex");

        // Send reset password email
        const mailOptions = {
            from: process.env.EMAIL_USER,
            to: email,
            subject: "Password Reset",
            text: `Your password reset code is: ${otp}`,
        };

        await transporter.sendMail(mailOptions);

        // Save hash and expiration time in the user document
        user.passwordResetToken = hash;
        user.passwordResetExpires = Date.now() + 600000; // 10 minutes

        await user.save();

        res.status(200).json({
            status: "success",
            message: "Password reset code sent to your email",
        });
    } catch (error) {
        res.status(400).json({
            status: "failed",
            error: error.message,
        });
    }
};

export const verifyResetCode = async(req, res) => {
    // try {
    const { resetCode } = req.body;
    const user = await User.findOne({ passwordResetToken: resetCode });

    if (!user) {
        return res.status(401).json({
            status: "failed",
            message: "Invalid reset code"
        });
    }

    // Check if reset code has expired    
    if (Date.now() > user.passwordResetExpires) {
        return res.status(401).json({
            status: "failed",
            message: "Reset code has expired"
        });
    }

    res.status(200).json({
        status: "success",
        message: "Reset code verified"
    });

    // } catch (error) {
    // Handle error
    // }
}

export const resetPassword = async(req, res) => {
    try {
        const { email, resetCode, newPassword } = req.body;

        // Check if the user exists
        const user = await User.findOne({ email });
        if (!user) {
            return res.status(404).json({
                status: "failed",
                message: "User not found",
            });
        }

        // Check if the reset code is valid
        const hash = crypto.createHash("sha256").update(resetCode).digest("hex");
        if (hash !== user.passwordResetToken) {
            return res.status(401).json({
                status: "failed",
                message: "Invalid reset code",
            });
        }

        // Check if the reset code has expired
        if (Date.now() > user.passwordResetExpires) {
            return res.status(401).json({
                status: "failed",
                message: "Reset code has expired",
            });
        }

        // Set the new password
        user.password = newPassword;
        user.passwordResetToken = undefined;
        user.passwordResetExpires = undefined;

        await user.save();

        res.status(200).json({
            status: "success",
            message: "Password reset successful",
        });
    } catch (error) {
        res.status(400).json({
            status: "failed",
            error: error.message,
        });
    }
};